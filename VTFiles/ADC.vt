// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2015 02:07:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NS3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NS3_vlg_sample_tst(
	ADC_DATA_A,
	ADC_DATA_B,
	IN_CLK,
	IN_KEY,
	LA_DATA_IN,
	MCU_DATA,
	RD,
	RS,
	SRAM_DATA,
	WR,
	sampler_tx
);
input [7:0] ADC_DATA_A;
input [7:0] ADC_DATA_B;
input  IN_CLK;
input [4:0] IN_KEY;
input [7:0] LA_DATA_IN;
input [7:0] MCU_DATA;
input  RD;
input  RS;
input [15:0] SRAM_DATA;
input  WR;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DATA_A or ADC_DATA_B or IN_CLK or IN_KEY or LA_DATA_IN or MCU_DATA or RD or RS or SRAM_DATA or WR)
                                                                                
begin                                         
 if ($time > 0)                               
 begin                                        
	if ($time == 0 || $time != current_time)  
	begin									  
		if (sample === 1'bx)                  
			sample = 0;                       
		else                                  
			sample = ~sample;                 
	end										  
	current_time = $time;					  
 end                                          
end                                           

assign sampler_tx = sample;
endmodule

module NS3_vlg_check_tst (
	A0,
	A1,
	A2,
	ADC_CLK,
	ADC_CLK1,
	B0,
	B1,
	B2,
	BackLight_OUT,
	MCU_DATA,
	O_C_A,
	O_C_B,
	OSC_EN,
	S1,
	S2,
	SRAM_ADRES,
	SRAM_CE,
	SRAM_CLK,
	SRAM_DATA,
	SRAM_OE,
	SRAM_WE,
	Write_Ready,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  ADC_CLK;
input  ADC_CLK1;
input  B0;
input  B1;
input  B2;
input  BackLight_OUT;
input [7:0] MCU_DATA;
input  O_C_A;
input  O_C_B;
input  OSC_EN;
input  S1;
input  S2;
input [17:0] SRAM_ADRES;
input  SRAM_CE;
input  SRAM_CLK;
input [15:0] SRAM_DATA;
input  SRAM_OE;
input  SRAM_WE;
input  Write_Ready;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  ADC_CLK_expected;
reg  ADC_CLK1_expected;
reg  B0_expected;
reg  B1_expected;
reg  B2_expected;
reg  BackLight_OUT_expected;
reg [7:0] MCU_DATA_expected;
reg  O_C_A_expected;
reg  O_C_B_expected;
reg  OSC_EN_expected;
reg  S1_expected;
reg  S2_expected;
reg [17:0] SRAM_ADRES_expected;
reg  SRAM_CE_expected;
reg  SRAM_CLK_expected;
reg [15:0] SRAM_DATA_expected;
reg  SRAM_OE_expected;
reg  SRAM_WE_expected;
reg  Write_Ready_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  ADC_CLK_prev;
reg  ADC_CLK1_prev;
reg  B0_prev;
reg  B1_prev;
reg  B2_prev;
reg  BackLight_OUT_prev;
reg [7:0] MCU_DATA_prev;
reg  O_C_A_prev;
reg  O_C_B_prev;
reg  OSC_EN_prev;
reg  S1_prev;
reg  S2_prev;
reg [17:0] SRAM_ADRES_prev;
reg  SRAM_CE_prev;
reg  SRAM_CLK_prev;
reg [15:0] SRAM_DATA_prev;
reg  SRAM_OE_prev;
reg  SRAM_WE_prev;
reg  Write_Ready_prev;

reg  ADC_CLK_expected_prev;
reg  ADC_CLK1_expected_prev;
reg [7:0] MCU_DATA_expected_prev;
reg [17:0] SRAM_ADRES_expected_prev;
reg  SRAM_CE_expected_prev;
reg  SRAM_CLK_expected_prev;
reg [15:0] SRAM_DATA_expected_prev;
reg  SRAM_OE_expected_prev;
reg  SRAM_WE_expected_prev;
reg  Write_Ready_expected_prev;

reg  last_ADC_CLK_exp;
reg  last_ADC_CLK1_exp;
reg [7:0] last_MCU_DATA_exp;
reg [17:0] last_SRAM_ADRES_exp;
reg  last_SRAM_CE_exp;
reg  last_SRAM_CLK_exp;
reg [15:0] last_SRAM_DATA_exp;
reg  last_SRAM_OE_exp;
reg  last_SRAM_WE_exp;
reg  last_Write_Ready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	ADC_CLK_prev = ADC_CLK;
	ADC_CLK1_prev = ADC_CLK1;
	B0_prev = B0;
	B1_prev = B1;
	B2_prev = B2;
	BackLight_OUT_prev = BackLight_OUT;
	MCU_DATA_prev = MCU_DATA;
	O_C_A_prev = O_C_A;
	O_C_B_prev = O_C_B;
	OSC_EN_prev = OSC_EN;
	S1_prev = S1;
	S2_prev = S2;
	SRAM_ADRES_prev = SRAM_ADRES;
	SRAM_CE_prev = SRAM_CE;
	SRAM_CLK_prev = SRAM_CLK;
	SRAM_DATA_prev = SRAM_DATA;
	SRAM_OE_prev = SRAM_OE;
	SRAM_WE_prev = SRAM_WE;
	Write_Ready_prev = Write_Ready;
end

// update expected /o prevs

always @(trigger)
begin
	ADC_CLK_expected_prev = ADC_CLK_expected;
	ADC_CLK1_expected_prev = ADC_CLK1_expected;
	MCU_DATA_expected_prev = MCU_DATA_expected;
	SRAM_ADRES_expected_prev = SRAM_ADRES_expected;
	SRAM_CE_expected_prev = SRAM_CE_expected;
	SRAM_CLK_expected_prev = SRAM_CLK_expected;
	SRAM_DATA_expected_prev = SRAM_DATA_expected;
	SRAM_OE_expected_prev = SRAM_OE_expected;
	SRAM_WE_expected_prev = SRAM_WE_expected;
	Write_Ready_expected_prev = Write_Ready_expected;
end



// expected ADC_CLK
initial
begin
	ADC_CLK_expected = 1'b0;
	# 13960;
	repeat(998)
	begin
		ADC_CLK_expected = 1'b1;
		ADC_CLK_expected = #5000 1'b0;
		# 5000;
	end
	ADC_CLK_expected = 1'b1;
	ADC_CLK_expected = #5000 1'b0;
end 

// expected ADC_CLK1
initial
begin
	ADC_CLK1_expected = 1'b0;
	# 13956;
	repeat(998)
	begin
		ADC_CLK1_expected = 1'b1;
		ADC_CLK1_expected = #5000 1'b0;
		# 5000;
	end
	ADC_CLK1_expected = 1'b1;
	ADC_CLK1_expected = #5000 1'b0;
end 

// expected SRAM_CLK
initial
begin
	SRAM_CLK_expected = 1'b0;
	# 10887;
	repeat(998)
	begin
		SRAM_CLK_expected = 1'b1;
		SRAM_CLK_expected = #5000 1'b0;
		# 5000;
	end
	SRAM_CLK_expected = 1'b1;
	SRAM_CLK_expected = #5000 1'b0;
end 
// expected SRAM_ADRES[ 17 ]
initial
begin
	SRAM_ADRES_expected[17] = 1'b0;
end 
// expected SRAM_ADRES[ 16 ]
initial
begin
	SRAM_ADRES_expected[16] = 1'b0;
end 
// expected SRAM_ADRES[ 15 ]
initial
begin
	SRAM_ADRES_expected[15] = 1'b0;
end 
// expected SRAM_ADRES[ 14 ]
initial
begin
	SRAM_ADRES_expected[14] = 1'b0;
end 
// expected SRAM_ADRES[ 13 ]
initial
begin
	SRAM_ADRES_expected[13] = 1'b0;
end 
// expected SRAM_ADRES[ 12 ]
initial
begin
	SRAM_ADRES_expected[12] = 1'b0;
end 
// expected SRAM_ADRES[ 11 ]
initial
begin
	SRAM_ADRES_expected[11] = 1'b0;
end 
// expected SRAM_ADRES[ 10 ]
initial
begin
	SRAM_ADRES_expected[10] = 1'b0;
end 
// expected SRAM_ADRES[ 9 ]
initial
begin
	SRAM_ADRES_expected[9] = 1'b0;
end 
// expected SRAM_ADRES[ 8 ]
initial
begin
	SRAM_ADRES_expected[8] = 1'b0;
end 
// expected SRAM_ADRES[ 7 ]
initial
begin
	SRAM_ADRES_expected[7] = 1'b0;
end 
// expected SRAM_ADRES[ 6 ]
initial
begin
	SRAM_ADRES_expected[6] = 1'b0;
end 
// expected SRAM_ADRES[ 5 ]
initial
begin
	SRAM_ADRES_expected[5] = 1'b0;
end 
// expected SRAM_ADRES[ 4 ]
initial
begin
	SRAM_ADRES_expected[4] = 1'b0;
	SRAM_ADRES_expected[4] = #4462186 1'b1;
end 
// expected SRAM_ADRES[ 3 ]
initial
begin
	SRAM_ADRES_expected[3] = 1'b0;
	SRAM_ADRES_expected[3] = #3783254 1'b1;
	SRAM_ADRES_expected[3] = #680000 1'b0;
	SRAM_ADRES_expected[3] = #680000 1'b1;
end 
// expected SRAM_ADRES[ 2 ]
initial
begin
	SRAM_ADRES_expected[2] = 1'b0;
	# 3443256;
	repeat(2)
	begin
		SRAM_ADRES_expected[2] = 1'b1;
		SRAM_ADRES_expected[2] = #340000 1'b0;
		# 340000;
	end
	SRAM_ADRES_expected[2] = 1'b1;
	SRAM_ADRES_expected[2] = #340000 1'b0;
end 
// expected SRAM_ADRES[ 1 ]
initial
begin
	SRAM_ADRES_expected[1] = 1'b0;
	# 3273246;
	repeat(6)
	begin
		SRAM_ADRES_expected[1] = 1'b1;
		SRAM_ADRES_expected[1] = #170000 1'b0;
		# 170000;
	end
	SRAM_ADRES_expected[1] = 1'b1;
end 
// expected SRAM_ADRES[ 0 ]
initial
begin
	SRAM_ADRES_expected[0] = 1'b0;
	# 3262153;
	repeat(12)
	begin
		SRAM_ADRES_expected[0] = 1'b1;
		SRAM_ADRES_expected[0] = #10000 1'b0;
		# 160000;
	end
	SRAM_ADRES_expected[0] = 1'b1;
end 

// expected SRAM_WE
initial
begin
	SRAM_WE_expected = 1'b0;
	SRAM_WE_expected = #12153 1'b1;
	# 3240000;
	repeat(12)
	begin
		SRAM_WE_expected = 1'b0;
		SRAM_WE_expected = #20000 1'b1;
		# 150000;
	end
	SRAM_WE_expected = 1'b0;
	SRAM_WE_expected = #10000 1'b1;
end 

// expected SRAM_OE
initial
begin
	SRAM_OE_expected = 1'b1;
end 

// expected SRAM_CE
initial
begin
	SRAM_CE_expected = 1'b1;
	SRAM_CE_expected = #3209003 1'b0;
	SRAM_CE_expected = #2096739 1'b1;
end 

// expected Write_Ready
initial
begin
	Write_Ready_expected = 1'b0;
	Write_Ready_expected = #5303450 1'b1;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or ADC_CLK_expected or ADC_CLK or ADC_CLK1_expected or ADC_CLK1 or B0_expected or B0 or B1_expected or B1 or B2_expected or B2 or BackLight_OUT_expected or BackLight_OUT or MCU_DATA_expected or MCU_DATA or O_C_A_expected or O_C_A or O_C_B_expected or O_C_B or OSC_EN_expected or OSC_EN or S1_expected or S1 or S2_expected or S2 or SRAM_ADRES_expected or SRAM_ADRES or SRAM_CE_expected or SRAM_CE or SRAM_CLK_expected or SRAM_CLK or SRAM_DATA_expected or SRAM_DATA or SRAM_OE_expected or SRAM_OE or SRAM_WE_expected or SRAM_WE or Write_Ready_expected or Write_Ready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected ADC_CLK = %b | expected ADC_CLK1 = %b | expected B0 = %b | expected B1 = %b | expected B2 = %b | expected BackLight_OUT = %b | expected MCU_DATA = %b | expected O_C_A = %b | expected O_C_B = %b | expected OSC_EN = %b | expected S1 = %b | expected S2 = %b | expected SRAM_ADRES = %b | expected SRAM_CE = %b | expected SRAM_CLK = %b | expected SRAM_DATA = %b | expected SRAM_OE = %b | expected SRAM_WE = %b | expected Write_Ready = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,ADC_CLK_expected_prev,ADC_CLK1_expected_prev,B0_expected_prev,B1_expected_prev,B2_expected_prev,BackLight_OUT_expected_prev,MCU_DATA_expected_prev,O_C_A_expected_prev,O_C_B_expected_prev,OSC_EN_expected_prev,S1_expected_prev,S2_expected_prev,SRAM_ADRES_expected_prev,SRAM_CE_expected_prev,SRAM_CLK_expected_prev,SRAM_DATA_expected_prev,SRAM_OE_expected_prev,SRAM_WE_expected_prev,Write_Ready_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real ADC_CLK = %b | real ADC_CLK1 = %b | real B0 = %b | real B1 = %b | real B2 = %b | real BackLight_OUT = %b | real MCU_DATA = %b | real O_C_A = %b | real O_C_B = %b | real OSC_EN = %b | real S1 = %b | real S2 = %b | real SRAM_ADRES = %b | real SRAM_CE = %b | real SRAM_CLK = %b | real SRAM_DATA = %b | real SRAM_OE = %b | real SRAM_WE = %b | real Write_Ready = %b | ",A0_prev,A1_prev,A2_prev,ADC_CLK_prev,ADC_CLK1_prev,B0_prev,B1_prev,B2_prev,BackLight_OUT_prev,MCU_DATA_prev,O_C_A_prev,O_C_B_prev,OSC_EN_prev,S1_prev,S2_prev,SRAM_ADRES_prev,SRAM_CE_prev,SRAM_CLK_prev,SRAM_DATA_prev,SRAM_OE_prev,SRAM_WE_prev,Write_Ready_prev);
`endif
	if (
		( ADC_CLK_expected_prev !== 1'bx ) && ( ADC_CLK_prev !== ADC_CLK_expected_prev )
		&& ((ADC_CLK_expected_prev !== last_ADC_CLK_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADC_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADC_CLK_expected_prev);
		$display ("     Real value = %b", ADC_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ADC_CLK_exp = ADC_CLK_expected_prev;
	end
	if (
		( ADC_CLK1_expected_prev !== 1'bx ) && ( ADC_CLK1_prev !== ADC_CLK1_expected_prev )
		&& ((ADC_CLK1_expected_prev !== last_ADC_CLK1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADC_CLK1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADC_CLK1_expected_prev);
		$display ("     Real value = %b", ADC_CLK1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ADC_CLK1_exp = ADC_CLK1_expected_prev;
	end
	if (
		( MCU_DATA_expected_prev[0] !== 1'bx ) && ( MCU_DATA_prev[0] !== MCU_DATA_expected_prev[0] )
		&& ((MCU_DATA_expected_prev[0] !== last_MCU_DATA_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[0] = MCU_DATA_expected_prev[0];
	end
	if (
		( MCU_DATA_expected_prev[1] !== 1'bx ) && ( MCU_DATA_prev[1] !== MCU_DATA_expected_prev[1] )
		&& ((MCU_DATA_expected_prev[1] !== last_MCU_DATA_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[1] = MCU_DATA_expected_prev[1];
	end
	if (
		( MCU_DATA_expected_prev[2] !== 1'bx ) && ( MCU_DATA_prev[2] !== MCU_DATA_expected_prev[2] )
		&& ((MCU_DATA_expected_prev[2] !== last_MCU_DATA_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[2] = MCU_DATA_expected_prev[2];
	end
	if (
		( MCU_DATA_expected_prev[3] !== 1'bx ) && ( MCU_DATA_prev[3] !== MCU_DATA_expected_prev[3] )
		&& ((MCU_DATA_expected_prev[3] !== last_MCU_DATA_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[3] = MCU_DATA_expected_prev[3];
	end
	if (
		( MCU_DATA_expected_prev[4] !== 1'bx ) && ( MCU_DATA_prev[4] !== MCU_DATA_expected_prev[4] )
		&& ((MCU_DATA_expected_prev[4] !== last_MCU_DATA_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[4] = MCU_DATA_expected_prev[4];
	end
	if (
		( MCU_DATA_expected_prev[5] !== 1'bx ) && ( MCU_DATA_prev[5] !== MCU_DATA_expected_prev[5] )
		&& ((MCU_DATA_expected_prev[5] !== last_MCU_DATA_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[5] = MCU_DATA_expected_prev[5];
	end
	if (
		( MCU_DATA_expected_prev[6] !== 1'bx ) && ( MCU_DATA_prev[6] !== MCU_DATA_expected_prev[6] )
		&& ((MCU_DATA_expected_prev[6] !== last_MCU_DATA_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[6] = MCU_DATA_expected_prev[6];
	end
	if (
		( MCU_DATA_expected_prev[7] !== 1'bx ) && ( MCU_DATA_prev[7] !== MCU_DATA_expected_prev[7] )
		&& ((MCU_DATA_expected_prev[7] !== last_MCU_DATA_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCU_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCU_DATA_expected_prev);
		$display ("     Real value = %b", MCU_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MCU_DATA_exp[7] = MCU_DATA_expected_prev[7];
	end
	if (
		( SRAM_ADRES_expected_prev[0] !== 1'bx ) && ( SRAM_ADRES_prev[0] !== SRAM_ADRES_expected_prev[0] )
		&& ((SRAM_ADRES_expected_prev[0] !== last_SRAM_ADRES_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[0] = SRAM_ADRES_expected_prev[0];
	end
	if (
		( SRAM_ADRES_expected_prev[1] !== 1'bx ) && ( SRAM_ADRES_prev[1] !== SRAM_ADRES_expected_prev[1] )
		&& ((SRAM_ADRES_expected_prev[1] !== last_SRAM_ADRES_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[1] = SRAM_ADRES_expected_prev[1];
	end
	if (
		( SRAM_ADRES_expected_prev[2] !== 1'bx ) && ( SRAM_ADRES_prev[2] !== SRAM_ADRES_expected_prev[2] )
		&& ((SRAM_ADRES_expected_prev[2] !== last_SRAM_ADRES_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[2] = SRAM_ADRES_expected_prev[2];
	end
	if (
		( SRAM_ADRES_expected_prev[3] !== 1'bx ) && ( SRAM_ADRES_prev[3] !== SRAM_ADRES_expected_prev[3] )
		&& ((SRAM_ADRES_expected_prev[3] !== last_SRAM_ADRES_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[3] = SRAM_ADRES_expected_prev[3];
	end
	if (
		( SRAM_ADRES_expected_prev[4] !== 1'bx ) && ( SRAM_ADRES_prev[4] !== SRAM_ADRES_expected_prev[4] )
		&& ((SRAM_ADRES_expected_prev[4] !== last_SRAM_ADRES_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[4] = SRAM_ADRES_expected_prev[4];
	end
	if (
		( SRAM_ADRES_expected_prev[5] !== 1'bx ) && ( SRAM_ADRES_prev[5] !== SRAM_ADRES_expected_prev[5] )
		&& ((SRAM_ADRES_expected_prev[5] !== last_SRAM_ADRES_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[5] = SRAM_ADRES_expected_prev[5];
	end
	if (
		( SRAM_ADRES_expected_prev[6] !== 1'bx ) && ( SRAM_ADRES_prev[6] !== SRAM_ADRES_expected_prev[6] )
		&& ((SRAM_ADRES_expected_prev[6] !== last_SRAM_ADRES_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[6] = SRAM_ADRES_expected_prev[6];
	end
	if (
		( SRAM_ADRES_expected_prev[7] !== 1'bx ) && ( SRAM_ADRES_prev[7] !== SRAM_ADRES_expected_prev[7] )
		&& ((SRAM_ADRES_expected_prev[7] !== last_SRAM_ADRES_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[7] = SRAM_ADRES_expected_prev[7];
	end
	if (
		( SRAM_ADRES_expected_prev[8] !== 1'bx ) && ( SRAM_ADRES_prev[8] !== SRAM_ADRES_expected_prev[8] )
		&& ((SRAM_ADRES_expected_prev[8] !== last_SRAM_ADRES_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[8] = SRAM_ADRES_expected_prev[8];
	end
	if (
		( SRAM_ADRES_expected_prev[9] !== 1'bx ) && ( SRAM_ADRES_prev[9] !== SRAM_ADRES_expected_prev[9] )
		&& ((SRAM_ADRES_expected_prev[9] !== last_SRAM_ADRES_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[9] = SRAM_ADRES_expected_prev[9];
	end
	if (
		( SRAM_ADRES_expected_prev[10] !== 1'bx ) && ( SRAM_ADRES_prev[10] !== SRAM_ADRES_expected_prev[10] )
		&& ((SRAM_ADRES_expected_prev[10] !== last_SRAM_ADRES_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[10] = SRAM_ADRES_expected_prev[10];
	end
	if (
		( SRAM_ADRES_expected_prev[11] !== 1'bx ) && ( SRAM_ADRES_prev[11] !== SRAM_ADRES_expected_prev[11] )
		&& ((SRAM_ADRES_expected_prev[11] !== last_SRAM_ADRES_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[11] = SRAM_ADRES_expected_prev[11];
	end
	if (
		( SRAM_ADRES_expected_prev[12] !== 1'bx ) && ( SRAM_ADRES_prev[12] !== SRAM_ADRES_expected_prev[12] )
		&& ((SRAM_ADRES_expected_prev[12] !== last_SRAM_ADRES_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[12] = SRAM_ADRES_expected_prev[12];
	end
	if (
		( SRAM_ADRES_expected_prev[13] !== 1'bx ) && ( SRAM_ADRES_prev[13] !== SRAM_ADRES_expected_prev[13] )
		&& ((SRAM_ADRES_expected_prev[13] !== last_SRAM_ADRES_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[13] = SRAM_ADRES_expected_prev[13];
	end
	if (
		( SRAM_ADRES_expected_prev[14] !== 1'bx ) && ( SRAM_ADRES_prev[14] !== SRAM_ADRES_expected_prev[14] )
		&& ((SRAM_ADRES_expected_prev[14] !== last_SRAM_ADRES_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[14] = SRAM_ADRES_expected_prev[14];
	end
	if (
		( SRAM_ADRES_expected_prev[15] !== 1'bx ) && ( SRAM_ADRES_prev[15] !== SRAM_ADRES_expected_prev[15] )
		&& ((SRAM_ADRES_expected_prev[15] !== last_SRAM_ADRES_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[15] = SRAM_ADRES_expected_prev[15];
	end
	if (
		( SRAM_ADRES_expected_prev[16] !== 1'bx ) && ( SRAM_ADRES_prev[16] !== SRAM_ADRES_expected_prev[16] )
		&& ((SRAM_ADRES_expected_prev[16] !== last_SRAM_ADRES_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[16] = SRAM_ADRES_expected_prev[16];
	end
	if (
		( SRAM_ADRES_expected_prev[17] !== 1'bx ) && ( SRAM_ADRES_prev[17] !== SRAM_ADRES_expected_prev[17] )
		&& ((SRAM_ADRES_expected_prev[17] !== last_SRAM_ADRES_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_ADRES[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_ADRES_expected_prev);
		$display ("     Real value = %b", SRAM_ADRES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SRAM_ADRES_exp[17] = SRAM_ADRES_expected_prev[17];
	end
	if (
		( SRAM_CE_expected_prev !== 1'bx ) && ( SRAM_CE_prev !== SRAM_CE_expected_prev )
		&& ((SRAM_CE_expected_prev !== last_SRAM_CE_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_CE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_CE_expected_prev);
		$display ("     Real value = %b", SRAM_CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_SRAM_CE_exp = SRAM_CE_expected_prev;
	end
	if (
		( SRAM_CLK_expected_prev !== 1'bx ) && ( SRAM_CLK_prev !== SRAM_CLK_expected_prev )
		&& ((SRAM_CLK_expected_prev !== last_SRAM_CLK_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_CLK_expected_prev);
		$display ("     Real value = %b", SRAM_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SRAM_CLK_exp = SRAM_CLK_expected_prev;
	end
	if (
		( SRAM_DATA_expected_prev[0] !== 1'bx ) && ( SRAM_DATA_prev[0] !== SRAM_DATA_expected_prev[0] )
		&& ((SRAM_DATA_expected_prev[0] !== last_SRAM_DATA_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[0] = SRAM_DATA_expected_prev[0];
	end
	if (
		( SRAM_DATA_expected_prev[1] !== 1'bx ) && ( SRAM_DATA_prev[1] !== SRAM_DATA_expected_prev[1] )
		&& ((SRAM_DATA_expected_prev[1] !== last_SRAM_DATA_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[1] = SRAM_DATA_expected_prev[1];
	end
	if (
		( SRAM_DATA_expected_prev[2] !== 1'bx ) && ( SRAM_DATA_prev[2] !== SRAM_DATA_expected_prev[2] )
		&& ((SRAM_DATA_expected_prev[2] !== last_SRAM_DATA_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[2] = SRAM_DATA_expected_prev[2];
	end
	if (
		( SRAM_DATA_expected_prev[3] !== 1'bx ) && ( SRAM_DATA_prev[3] !== SRAM_DATA_expected_prev[3] )
		&& ((SRAM_DATA_expected_prev[3] !== last_SRAM_DATA_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[3] = SRAM_DATA_expected_prev[3];
	end
	if (
		( SRAM_DATA_expected_prev[4] !== 1'bx ) && ( SRAM_DATA_prev[4] !== SRAM_DATA_expected_prev[4] )
		&& ((SRAM_DATA_expected_prev[4] !== last_SRAM_DATA_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[4] = SRAM_DATA_expected_prev[4];
	end
	if (
		( SRAM_DATA_expected_prev[5] !== 1'bx ) && ( SRAM_DATA_prev[5] !== SRAM_DATA_expected_prev[5] )
		&& ((SRAM_DATA_expected_prev[5] !== last_SRAM_DATA_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[5] = SRAM_DATA_expected_prev[5];
	end
	if (
		( SRAM_DATA_expected_prev[6] !== 1'bx ) && ( SRAM_DATA_prev[6] !== SRAM_DATA_expected_prev[6] )
		&& ((SRAM_DATA_expected_prev[6] !== last_SRAM_DATA_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[6] = SRAM_DATA_expected_prev[6];
	end
	if (
		( SRAM_DATA_expected_prev[7] !== 1'bx ) && ( SRAM_DATA_prev[7] !== SRAM_DATA_expected_prev[7] )
		&& ((SRAM_DATA_expected_prev[7] !== last_SRAM_DATA_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[7] = SRAM_DATA_expected_prev[7];
	end
	if (
		( SRAM_DATA_expected_prev[8] !== 1'bx ) && ( SRAM_DATA_prev[8] !== SRAM_DATA_expected_prev[8] )
		&& ((SRAM_DATA_expected_prev[8] !== last_SRAM_DATA_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[8] = SRAM_DATA_expected_prev[8];
	end
	if (
		( SRAM_DATA_expected_prev[9] !== 1'bx ) && ( SRAM_DATA_prev[9] !== SRAM_DATA_expected_prev[9] )
		&& ((SRAM_DATA_expected_prev[9] !== last_SRAM_DATA_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[9] = SRAM_DATA_expected_prev[9];
	end
	if (
		( SRAM_DATA_expected_prev[10] !== 1'bx ) && ( SRAM_DATA_prev[10] !== SRAM_DATA_expected_prev[10] )
		&& ((SRAM_DATA_expected_prev[10] !== last_SRAM_DATA_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[10] = SRAM_DATA_expected_prev[10];
	end
	if (
		( SRAM_DATA_expected_prev[11] !== 1'bx ) && ( SRAM_DATA_prev[11] !== SRAM_DATA_expected_prev[11] )
		&& ((SRAM_DATA_expected_prev[11] !== last_SRAM_DATA_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[11] = SRAM_DATA_expected_prev[11];
	end
	if (
		( SRAM_DATA_expected_prev[12] !== 1'bx ) && ( SRAM_DATA_prev[12] !== SRAM_DATA_expected_prev[12] )
		&& ((SRAM_DATA_expected_prev[12] !== last_SRAM_DATA_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[12] = SRAM_DATA_expected_prev[12];
	end
	if (
		( SRAM_DATA_expected_prev[13] !== 1'bx ) && ( SRAM_DATA_prev[13] !== SRAM_DATA_expected_prev[13] )
		&& ((SRAM_DATA_expected_prev[13] !== last_SRAM_DATA_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[13] = SRAM_DATA_expected_prev[13];
	end
	if (
		( SRAM_DATA_expected_prev[14] !== 1'bx ) && ( SRAM_DATA_prev[14] !== SRAM_DATA_expected_prev[14] )
		&& ((SRAM_DATA_expected_prev[14] !== last_SRAM_DATA_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[14] = SRAM_DATA_expected_prev[14];
	end
	if (
		( SRAM_DATA_expected_prev[15] !== 1'bx ) && ( SRAM_DATA_prev[15] !== SRAM_DATA_expected_prev[15] )
		&& ((SRAM_DATA_expected_prev[15] !== last_SRAM_DATA_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_DATA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_DATA_expected_prev);
		$display ("     Real value = %b", SRAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SRAM_DATA_exp[15] = SRAM_DATA_expected_prev[15];
	end
	if (
		( SRAM_OE_expected_prev !== 1'bx ) && ( SRAM_OE_prev !== SRAM_OE_expected_prev )
		&& ((SRAM_OE_expected_prev !== last_SRAM_OE_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_OE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_OE_expected_prev);
		$display ("     Real value = %b", SRAM_OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SRAM_OE_exp = SRAM_OE_expected_prev;
	end
	if (
		( SRAM_WE_expected_prev !== 1'bx ) && ( SRAM_WE_prev !== SRAM_WE_expected_prev )
		&& ((SRAM_WE_expected_prev !== last_SRAM_WE_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SRAM_WE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SRAM_WE_expected_prev);
		$display ("     Real value = %b", SRAM_WE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SRAM_WE_exp = SRAM_WE_expected_prev;
	end
	if (
		( Write_Ready_expected_prev !== 1'bx ) && ( Write_Ready_prev !== Write_Ready_expected_prev )
		&& ((Write_Ready_expected_prev !== last_Write_Ready_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Ready_expected_prev);
		$display ("     Real value = %b", Write_Ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Write_Ready_exp = Write_Ready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module NS3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] ADC_DATA_A;
reg [7:0] ADC_DATA_B;
reg IN_CLK;
reg [4:0] IN_KEY;
reg [7:0] LA_DATA_IN;
reg [7:0] treg_MCU_DATA;
reg RD;
reg RS;
reg [15:0] treg_SRAM_DATA;
reg WR;
// wires                                               
wire A0;
wire A1;
wire A2;
wire ADC_CLK;
wire ADC_CLK1;
wire B0;
wire B1;
wire B2;
wire BackLight_OUT;
wire [7:0] MCU_DATA;
wire O_C_A;
wire O_C_B;
wire OSC_EN;
wire S1;
wire S2;
wire [17:0] SRAM_ADRES;
wire SRAM_CE;
wire SRAM_CLK;
wire [15:0] SRAM_DATA;
wire SRAM_OE;
wire SRAM_WE;
wire Write_Ready;

wire sampler;                             

// assign statements (if any)                          
assign MCU_DATA = treg_MCU_DATA;
assign SRAM_DATA = treg_SRAM_DATA;
NS3 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.ADC_CLK(ADC_CLK),
	.ADC_CLK1(ADC_CLK1),
	.ADC_DATA_A(ADC_DATA_A),
	.ADC_DATA_B(ADC_DATA_B),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.BackLight_OUT(BackLight_OUT),
	.IN_CLK(IN_CLK),
	.IN_KEY(IN_KEY),
	.LA_DATA_IN(LA_DATA_IN),
	.MCU_DATA(MCU_DATA),
	.O_C_A(O_C_A),
	.O_C_B(O_C_B),
	.OSC_EN(OSC_EN),
	.RD(RD),
	.RS(RS),
	.S1(S1),
	.S2(S2),
	.SRAM_ADRES(SRAM_ADRES),
	.SRAM_CE(SRAM_CE),
	.SRAM_CLK(SRAM_CLK),
	.SRAM_DATA(SRAM_DATA),
	.SRAM_OE(SRAM_OE),
	.SRAM_WE(SRAM_WE),
	.WR(WR),
	.Write_Ready(Write_Ready)
);

// IN_CLK
initial
begin
	repeat(266)
	begin
		IN_CLK = 1'b0;
		IN_CLK = #5000 1'b1;
		# 5000;
	end
	IN_CLK = 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	# 5000;
	repeat(17)
	begin
		IN_CLK = 1'b0;
		IN_CLK = #5000 1'b1;
		# 5000;
	end
	IN_CLK = 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	# 5000;
	repeat(6)
	begin
		IN_CLK = 1'b0;
		IN_CLK = #5000 1'b1;
		# 5000;
	end
	IN_CLK = 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	IN_CLK = #5000 1'b0;
	IN_CLK = #5000 1'b1;
	# 5000;
	repeat(6)
	begin
		IN_CLK = 1'b0;
		IN_CLK = #5000 1'b1;
		# 5000;
	end
	IN_CLK = 1'b0;
	IN_CLK = #5000 1'b1;
	# 5000;
	repeat(654)
	begin
		IN_CLK = 1'b0;
		IN_CLK = #5000 1'b1;
		# 5000;
	end
end 
// ADC_DATA_A[ 7 ]
initial
begin
	ADC_DATA_A[7] = 1'b0;
	ADC_DATA_A[7] = #1286000 1'b1;
	# 1280000;
	repeat(2)
	begin
		ADC_DATA_A[7] = 1'b0;
		ADC_DATA_A[7] = #1280000 1'b1;
		# 1280000;
	end
	ADC_DATA_A[7] = 1'b0;
	ADC_DATA_A[7] = #1280000 1'b1;
end 
// ADC_DATA_A[ 6 ]
initial
begin
	ADC_DATA_A[6] = 1'b0;
	ADC_DATA_A[6] = #646000 1'b1;
	# 640000;
	repeat(6)
	begin
		ADC_DATA_A[6] = 1'b0;
		ADC_DATA_A[6] = #640000 1'b1;
		# 640000;
	end
	ADC_DATA_A[6] = 1'b0;
	ADC_DATA_A[6] = #640000 1'b1;
end 
// ADC_DATA_A[ 5 ]
initial
begin
	ADC_DATA_A[5] = 1'b0;
	ADC_DATA_A[5] = #326000 1'b1;
	# 320000;
	repeat(14)
	begin
		ADC_DATA_A[5] = 1'b0;
		ADC_DATA_A[5] = #320000 1'b1;
		# 320000;
	end
	ADC_DATA_A[5] = 1'b0;
	ADC_DATA_A[5] = #320000 1'b1;
end 
// ADC_DATA_A[ 4 ]
initial
begin
	ADC_DATA_A[4] = 1'b0;
	ADC_DATA_A[4] = #166000 1'b1;
	# 160000;
	repeat(30)
	begin
		ADC_DATA_A[4] = 1'b0;
		ADC_DATA_A[4] = #160000 1'b1;
		# 160000;
	end
	ADC_DATA_A[4] = 1'b0;
end 
// ADC_DATA_A[ 3 ]
initial
begin
	ADC_DATA_A[3] = 1'b0;
	ADC_DATA_A[3] = #86000 1'b1;
	# 80000;
	repeat(61)
	begin
		ADC_DATA_A[3] = 1'b0;
		ADC_DATA_A[3] = #80000 1'b1;
		# 80000;
	end
	ADC_DATA_A[3] = 1'b0;
end 
// ADC_DATA_A[ 2 ]
initial
begin
	ADC_DATA_A[2] = 1'b0;
	ADC_DATA_A[2] = #46000 1'b1;
	# 40000;
	repeat(123)
	begin
		ADC_DATA_A[2] = 1'b0;
		ADC_DATA_A[2] = #40000 1'b1;
		# 40000;
	end
	ADC_DATA_A[2] = 1'b0;
	ADC_DATA_A[2] = #40000 1'b1;
end 
// ADC_DATA_A[ 1 ]
initial
begin
	ADC_DATA_A[1] = 1'b0;
	ADC_DATA_A[1] = #26000 1'b1;
	# 20000;
	repeat(248)
	begin
		ADC_DATA_A[1] = 1'b0;
		ADC_DATA_A[1] = #20000 1'b1;
		# 20000;
	end
	ADC_DATA_A[1] = 1'b0;
	ADC_DATA_A[1] = #20000 1'b1;
end 
// ADC_DATA_A[ 0 ]
initial
begin
	ADC_DATA_A[0] = 1'b0;
	ADC_DATA_A[0] = #16000 1'b1;
	# 10000;
	repeat(498)
	begin
		ADC_DATA_A[0] = 1'b0;
		ADC_DATA_A[0] = #10000 1'b1;
		# 10000;
	end
	ADC_DATA_A[0] = 1'b0;
	ADC_DATA_A[0] = #10000 1'b1;
end 
// ADC_DATA_B[ 7 ]
initial
begin
	ADC_DATA_B[7] = 1'b0;
	ADC_DATA_B[7] = #16000 1'b1;
	ADC_DATA_B[7] = #1280000 1'b0;
	# 1280000;
	repeat(2)
	begin
		ADC_DATA_B[7] = 1'b1;
		ADC_DATA_B[7] = #1280000 1'b0;
		# 1280000;
	end
	ADC_DATA_B[7] = 1'b1;
	ADC_DATA_B[7] = #1280000 1'b0;
end 
// ADC_DATA_B[ 6 ]
initial
begin
	ADC_DATA_B[6] = 1'b1;
	ADC_DATA_B[6] = #16000 1'b0;
	ADC_DATA_B[6] = #640000 1'b1;
	# 640000;
	repeat(6)
	begin
		ADC_DATA_B[6] = 1'b0;
		ADC_DATA_B[6] = #640000 1'b1;
		# 640000;
	end
	ADC_DATA_B[6] = 1'b0;
	ADC_DATA_B[6] = #640000 1'b1;
end 
// ADC_DATA_B[ 5 ]
initial
begin
	ADC_DATA_B[5] = 1'b1;
	ADC_DATA_B[5] = #16000 1'b0;
	ADC_DATA_B[5] = #320000 1'b1;
	# 320000;
	repeat(14)
	begin
		ADC_DATA_B[5] = 1'b0;
		ADC_DATA_B[5] = #320000 1'b1;
		# 320000;
	end
	ADC_DATA_B[5] = 1'b0;
	ADC_DATA_B[5] = #320000 1'b1;
end 
// ADC_DATA_B[ 4 ]
initial
begin
	ADC_DATA_B[4] = 1'b1;
	ADC_DATA_B[4] = #16000 1'b0;
	ADC_DATA_B[4] = #160000 1'b1;
	# 160000;
	repeat(30)
	begin
		ADC_DATA_B[4] = 1'b0;
		ADC_DATA_B[4] = #160000 1'b1;
		# 160000;
	end
	ADC_DATA_B[4] = 1'b0;
end 
// ADC_DATA_B[ 3 ]
initial
begin
	ADC_DATA_B[3] = 1'b1;
	ADC_DATA_B[3] = #16000 1'b0;
	ADC_DATA_B[3] = #80000 1'b1;
	# 80000;
	repeat(61)
	begin
		ADC_DATA_B[3] = 1'b0;
		ADC_DATA_B[3] = #80000 1'b1;
		# 80000;
	end
	ADC_DATA_B[3] = 1'b0;
end 
// ADC_DATA_B[ 2 ]
initial
begin
	ADC_DATA_B[2] = 1'b1;
	ADC_DATA_B[2] = #16000 1'b0;
	ADC_DATA_B[2] = #40000 1'b1;
	# 40000;
	repeat(123)
	begin
		ADC_DATA_B[2] = 1'b0;
		ADC_DATA_B[2] = #40000 1'b1;
		# 40000;
	end
	ADC_DATA_B[2] = 1'b0;
	ADC_DATA_B[2] = #40000 1'b1;
end 
// ADC_DATA_B[ 1 ]
initial
begin
	ADC_DATA_B[1] = 1'b1;
	ADC_DATA_B[1] = #16000 1'b0;
	ADC_DATA_B[1] = #20000 1'b1;
	# 20000;
	repeat(248)
	begin
		ADC_DATA_B[1] = 1'b0;
		ADC_DATA_B[1] = #20000 1'b1;
		# 20000;
	end
	ADC_DATA_B[1] = 1'b0;
	ADC_DATA_B[1] = #20000 1'b1;
end 
// ADC_DATA_B[ 0 ]
initial
begin
	ADC_DATA_B[0] = 1'b1;
	ADC_DATA_B[0] = #16000 1'b0;
	# 10000;
	repeat(498)
	begin
		ADC_DATA_B[0] = 1'b1;
		ADC_DATA_B[0] = #10000 1'b0;
		# 10000;
	end
	ADC_DATA_B[0] = 1'b1;
	ADC_DATA_B[0] = #10000 1'b0;
end 
// SRAM_DATA[ 15 ]
initial
begin
	treg_SRAM_DATA[15] = 1'bZ;
end 
// SRAM_DATA[ 14 ]
initial
begin
	treg_SRAM_DATA[14] = 1'bZ;
end 
// SRAM_DATA[ 13 ]
initial
begin
	treg_SRAM_DATA[13] = 1'bZ;
end 
// SRAM_DATA[ 12 ]
initial
begin
	treg_SRAM_DATA[12] = 1'bZ;
end 
// SRAM_DATA[ 11 ]
initial
begin
	treg_SRAM_DATA[11] = 1'bZ;
end 
// SRAM_DATA[ 10 ]
initial
begin
	treg_SRAM_DATA[10] = 1'bZ;
end 
// SRAM_DATA[ 9 ]
initial
begin
	treg_SRAM_DATA[9] = 1'bZ;
end 
// SRAM_DATA[ 8 ]
initial
begin
	treg_SRAM_DATA[8] = 1'bZ;
end 
// SRAM_DATA[ 7 ]
initial
begin
	treg_SRAM_DATA[7] = 1'bZ;
end 
// SRAM_DATA[ 6 ]
initial
begin
	treg_SRAM_DATA[6] = 1'bZ;
end 
// SRAM_DATA[ 5 ]
initial
begin
	treg_SRAM_DATA[5] = 1'bZ;
end 
// SRAM_DATA[ 4 ]
initial
begin
	treg_SRAM_DATA[4] = 1'bZ;
end 
// SRAM_DATA[ 3 ]
initial
begin
	treg_SRAM_DATA[3] = 1'bZ;
end 
// SRAM_DATA[ 2 ]
initial
begin
	treg_SRAM_DATA[2] = 1'bZ;
end 
// SRAM_DATA[ 1 ]
initial
begin
	treg_SRAM_DATA[1] = 1'bZ;
end 
// SRAM_DATA[ 0 ]
initial
begin
	treg_SRAM_DATA[0] = 1'bZ;
end 
// MCU_DATA[ 7 ]
initial
begin
	treg_MCU_DATA[7] = 1'b0;
end 
// MCU_DATA[ 6 ]
initial
begin
	treg_MCU_DATA[6] = 1'b0;
end 
// MCU_DATA[ 5 ]
initial
begin
	treg_MCU_DATA[5] = 1'b0;
end 
// MCU_DATA[ 4 ]
initial
begin
	treg_MCU_DATA[4] = 1'b0;
	treg_MCU_DATA[4] = #160000 1'b1;
	treg_MCU_DATA[4] = #120000 1'b0;
	treg_MCU_DATA[4] = #870000 1'b1;
	treg_MCU_DATA[4] = #150000 1'b0;
	treg_MCU_DATA[4] = #150000 1'b1;
	treg_MCU_DATA[4] = #150000 1'b0;
	treg_MCU_DATA[4] = #1050000 1'b1;
	treg_MCU_DATA[4] = #150000 1'b0;
end 
// MCU_DATA[ 3 ]
initial
begin
	treg_MCU_DATA[3] = 1'b0;
	treg_MCU_DATA[3] = #1750000 1'b1;
	treg_MCU_DATA[3] = #150000 1'b0;
	treg_MCU_DATA[3] = #300000 1'b1;
	treg_MCU_DATA[3] = #150000 1'b0;
	treg_MCU_DATA[3] = #600000 1'b1;
	treg_MCU_DATA[3] = #150000 1'b0;
end 
// MCU_DATA[ 2 ]
initial
begin
	treg_MCU_DATA[2] = 1'b0;
	treg_MCU_DATA[2] = #850000 1'b1;
	treg_MCU_DATA[2] = #150000 1'b0;
	treg_MCU_DATA[2] = #1050000 1'b1;
	treg_MCU_DATA[2] = #150000 1'b0;
	treg_MCU_DATA[2] = #150000 1'b1;
	treg_MCU_DATA[2] = #150000 1'b0;
	treg_MCU_DATA[2] = #450000 1'b1;
	treg_MCU_DATA[2] = #150000 1'b0;
end 
// MCU_DATA[ 1 ]
initial
begin
	treg_MCU_DATA[1] = 1'b0;
	treg_MCU_DATA[1] = #550000 1'b1;
	treg_MCU_DATA[1] = #150000 1'b0;
	treg_MCU_DATA[1] = #750000 1'b1;
	treg_MCU_DATA[1] = #150000 1'b0;
	treg_MCU_DATA[1] = #445000 1'b1;
	treg_MCU_DATA[1] = #5000 1'b0;
	treg_MCU_DATA[1] = #150000 1'b1;
	treg_MCU_DATA[1] = #300000 1'b0;
	treg_MCU_DATA[1] = #600000 1'b1;
	treg_MCU_DATA[1] = #140000 1'b0;
end 
// MCU_DATA[ 0 ]
initial
begin
	treg_MCU_DATA[0] = 1'b0;
	treg_MCU_DATA[0] = #280000 1'b1;
	treg_MCU_DATA[0] = #120000 1'b0;
	treg_MCU_DATA[0] = #150000 1'b1;
	treg_MCU_DATA[0] = #150000 1'b0;
	treg_MCU_DATA[0] = #450000 1'b1;
	treg_MCU_DATA[0] = #150000 1'b0;
	treg_MCU_DATA[0] = #745000 1'b1;
	treg_MCU_DATA[0] = #155000 1'b0;
	treg_MCU_DATA[0] = #750000 1'b1;
	treg_MCU_DATA[0] = #290000 1'b0;
end 

// WR
initial
begin
	WR = 1'b0;
	WR = #90000 1'b1;
	WR = #50000 1'b0;
	WR = #60000 1'b1;
	WR = #50000 1'b0;
	WR = #70000 1'b1;
	WR = #50000 1'b0;
	WR = #105000 1'b1;
	# 75000;
	repeat(18)
	begin
		WR = 1'b0;
		WR = #75000 1'b1;
		# 75000;
	end
	WR = 1'b0;
end 

// RD
initial
begin
	RD = 1'b0;
end 

// RS
initial
begin
	RS = 1'b0;
	RS = #70000 1'b1;
	RS = #90000 1'b0;
	RS = #130000 1'b1;
	RS = #100000 1'b0;
	RS = #160000 1'b1;
	# 150000;
	repeat(8)
	begin
		RS = 1'b0;
		RS = #150000 1'b1;
		# 150000;
	end
	RS = 1'b0;
end 

NS3_vlg_sample_tst tb_sample (
	.ADC_DATA_A(ADC_DATA_A),
	.ADC_DATA_B(ADC_DATA_B),
	.IN_CLK(IN_CLK),
	.IN_KEY(IN_KEY),
	.LA_DATA_IN(LA_DATA_IN),
	.MCU_DATA(MCU_DATA),
	.RD(RD),
	.RS(RS),
	.SRAM_DATA(SRAM_DATA),
	.WR(WR),
	.sampler_tx(sampler)
);

NS3_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.ADC_CLK(ADC_CLK),
	.ADC_CLK1(ADC_CLK1),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.BackLight_OUT(BackLight_OUT),
	.MCU_DATA(MCU_DATA),
	.O_C_A(O_C_A),
	.O_C_B(O_C_B),
	.OSC_EN(OSC_EN),
	.S1(S1),
	.S2(S2),
	.SRAM_ADRES(SRAM_ADRES),
	.SRAM_CE(SRAM_CE),
	.SRAM_CLK(SRAM_CLK),
	.SRAM_DATA(SRAM_DATA),
	.SRAM_OE(SRAM_OE),
	.SRAM_WE(SRAM_WE),
	.Write_Ready(Write_Ready),
	.sampler_rx(sampler)
);
endmodule

